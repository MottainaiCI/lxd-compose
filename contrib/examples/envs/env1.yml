version: "1"

# Choice the template engine to use.
# Supported engines are:
#   - mottainai (customized golang template engine)
#   - jinja2 (use j2cli engine)
template_engine:
  engine: "jinja2"
  # Additional template engine options
  # opts:
  #   - "--undefined"
  # For jinja2 there are a lot filter in ansible package
  # that could be loaded with:
  opts:
    # Enable to_yaml, to_json, etc.
    - "--filters"
    - "/usr/lib/python3.7/site-packages/ansible/plugins/filter/core.py"
    - "contrib/filters/from_json.py"

# Define the list of LXD Profiles used by all projects.
# This profiles are not mandatory. An user could create and
# handle his profiles without define the list here.
#profiles:
#  - name: "profile1"
#    description: "xxx"
    # config and devices are field like describe here: https://godoc.org/github.com/lxc/lxd/shared/api#ProfilePut
#    config:
      # map[string]string 
#    devices:
      # map[string]map[string]string


networks:
  - name: "mottainai1"
    type: "bridge"
    config:
      bridge.driver: native
      dns.domain: mottainai.local
      dns.mode: managed
      ipv4.address: 172.18.10.1/23
      ipv4.dhcp: "true"
      ipv4.firewall: "true"
      ipv4.nat: "true"
      ipv6.nat: "true"


# Define commands / alias to apply
commands:
  - name: "command1"
    description: |
      Run command 1.

    project: "lxd-compose-example1"
    apply_alias: true

    enable_groups:
      - group1

    envs:
      key2: "value2"

  - name: "disable-hook"
    description: |
      Run hook disabled.

    project: "lxd-compose-example1"
    apply_alias: true

    enable_flags:
      - disabled

    envs:
      key2: "value2"

# Include commands from external file
include_commands_files:
  - commands/cmd1.yml

projects:

  - name: "lxd-compose-example1"
    description: "LXD Compose Example1"

    # Define optional directory where retrieve the groups
    # of the environment. The relative path is based on
    # directory of the environment file.
    #include_groups_files:
    #  - groups/group1.yml
    #  - groups/group2.yml

    # Environments files to use with engine. Supported files depends on
    # template engine
    include_env_files:
      - ../vars/file1.yml
    #  - envs/file2.yml

    # hooks:
      # event values are
      # - pre-group
      # - post-group
      # - pre-node-creation
      # - post-node-creation
      # - pre-node-sync
      # - post-node-sync
      # - pre-project
      # - post-project
      #
      #- event: pre-group
      #  node: "xx"
      #
      # node field contains name of the node
      # where execute the hook else all nodes of all groups if
      # not set.
      # Special value "host" means execute command locally.
      #
      #  commands:
      #    - echo "1"
      #
      # Get stdout of the commands and store it to a project
      # environment. Optional parameter.
      #  out2var: "myvar1"
      #
      # Get stderr of the commands and store it to a project
      # environment. Optional parameter.
      #  err2var: "myvar2"
      #
      # Disable the hook. The only way to run a disabled hook
      # is to set a flag that is pass with --enable-flag option.
      #  disable: true.

    hooks:
      - event: pre-group
        flags:
          - disabled
        node: "host"
        commands:
          - |
            echo '[{ "user": "user1" }]'
        out2var: "json_var"
      - event: pre-group
        node: "host"
        flags:
          - disabled
        commands:
          - |
            echo '[{ "user": "user1" }]'
        out2var: "json_var"

{{- if .Values.run }}
      - event: post-group
        node: "node1"
        commands:
          - echo "run post-project command on node1 from render variable"
          - hostname
{{ end }}

    # A fast way to define environments for template
    vars:
      - envs:
          key1: "value1"
          key2: "value2"

          obj:
            key: "xxx"
            foo: "baa"

          LUET_YES: "true"

    groups:
      - name: "group1"
        description: "Description1"

        # Define the LXD Remote to use and where
        # create the environment.
        connection: "local"
        # Define the list of LXD Profile to use
        # for create the containers
        common_profiles:
          - default
          - net-mottainai0

        # Create the environment container as ephemeral or not.
        ephemeral: true

        hooks:
          - event: pre-node-sync
            node: "host"
            commands:
              - echo "HOST PRE-NODE-SYNC (ON GROUP)"
        # hooks:
        #   ....
        # event values are
        # - pre-group
        # - post-group
        # - pre-node-creation
        # - post-node-creation
        # - pre-node-sync
        # - post-node-sync
        #
        # config_templates:
        #   ....

        nodes:
          - name: node1
            image_source: "alpine/3.12"
            #image_source: "20d2712090d1"
            #image_remote_server: "images"

            # Define labels to node for particular configuration tasks.
            # labels:
            #  label1: value1
            labels:
              mynode_data1: "data1"

            # Specify directory where build path of templates.
            # Directory could be an absolute path or a relative path based
            # on env base dir.
            # source_dir: "."

            entrypoint:
              - "/bin/sh"
              - "-c"

            # Define the list of LXD Profile to use in additional
            # to group profiles for create the containers
            # profiles:
            #  - mynode-profile

            # List of commands executed just after the creation of the
            # container.
            hooks:

              - event: post-node-creation
                node: "host"
                commands:
                  - echo "Run host command"
              - event: post-node-creation
                commands:
                  - echo "1"

              # Print node json
              - event: post-node-creation
                commands:
                  - apk add curl
                  - curl --no-progress-meter https://get.mocaccino.org/luet/get_luet_root.sh | sh
                  - luet install repository/mocaccino-extra
                  - luet install utils/jq
                  - echo "${node}" | jq

              - event: pre-node-sync
                node: "host"
                commands:
                  - echo "HOST PRE-NODE-SYNC"

              - event: post-node-sync
                commands:
                  - echo "Start app"
                out2var: "myvar"
              - event: post-node-sync
                commands:
                  - echo "${myvar}"
              - event: post-node-sync
                commands:
                  - echo "${key1}"
              - event: post-node-sync
                commands:
                  - echo "${obj}"
              # Print label key"
              - event: post-node-sync
                commands:
                  - echo "${mynode_data1}"

              - event: post-node-sync
                node: "host"
                commands:
                  - echo "HOST ${myvar}"
                  - echo "${myvar}"
              - event: post-node-sync
                node: "host"
                entrypoint:
                  - /bin/bash
                  - -c
                flags:
                  - flag1
                commands:
                  - echo "${myvar}" > /tmp/lxd-compose-var

              - event: post-node-sync
                node: "host"
                entrypoint:
                  - /bin/bash
                  - -c
                flags:
                  - flag2
                commands:
                  - |
                    echo '{ "obj1": "value1" }' | jq '.obj1'
                out2var: "host_var"

              - event: post-node-sync
                node: "host"
                entrypoint:
                  - /bin/bash
                  - -c
                flags:
                  - flag2
                commands:
                  - echo "${host_var}"

              - event: post-node-sync
                commands:
                  - echo "${json_var}"

              - event: post-node-sync
                commands:
                  - echo "${runtime_var}"

              - event: post-node-sync
                flags:
                  - disabled
                disable: true
                commands:
                  - echo "Command DISABLED!"

            # List of templates files to compiles before push the
            # result inside container.
            config_templates:
              - source: files/template.j2
                dst: files/myconf.conf.yaml

            sync_resources:
              # source: File or directory to push
              # dst: File or directory target. For directory is needed "/" at the end
              - source: files/myconf.conf.yaml
                dst: /etc/myapp/myconf.conf.yaml

              - source: files/
                dst: /etc/myapp2/


